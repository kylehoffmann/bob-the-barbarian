<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>OBJ_CUTSCENE_CONTROLLER</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// This is where the cutscenes are incoded. 
//  -   TO_DO: Rebuild cutsenes to have a bunch of smaller timed events
//          rather than one large event. Further instance smaller events and
//          have things like fade events and text display events and end
//          the ctuscene as an event call as the final step.

// Sets the border size around the text box
text_box_border = 5;
// Sets space around the text window.
text_box_distance_from_edge= text_box_border * 2;

// Checks which cutscene is playing.
// -    Currently there is one.
if (global.cutscene_id == CUTSCENE_1_ID)
{
    // Sets coordiates for where to draw the wizard.
    // -    Would need to be adjused if the sprite changed, or
    //          was rescaled.
    wizard_x = 920;
    wizard_y = 650;
    // Sets the scale on the wizards image.
    wizard_scale_x = 8;
    wizard_scale_y = 8;
    // Sets how many frames the wizard will fade in and out for
    // -    Defualt 30 frames (1 second).
    fade_rate = 30;
    // Sets the rate of how many frames it takes to show a letter.
    // -    Tweaked to annoy the player, hopefully to make them hate
    //          the wizard more.
    //      Default: 5 frames.
    message_rate = 5;
    // The buffer between the line where the speakers's name appears
    //  and what they are saying.
    message_line_buffer = 35;
    
    // Stores the first speaker.
    // -    In this case the wizard.
    message_1 = "Evil Wizard Elyk:";
    // Stores what the Wizard says.
    message_2 = "HA HA!#"
        + "You have done well to make it so far.#"
        + "But now you shall meet your demise!!!";
    // Creates an empty string that will be the true output for
    //  When the message is displayed. (The message to be displayed
    //  is copied here at the rate of one character per message_rate frames.
    message_temp = "";
    
    // Sets the end stamp for the first part of the animation.
    // -    In this case the animation is the time it takes for 
    //          the wizard to fade on screen.
    fade_in = fade_rate;
    // Adds the first phase of animation to total running time of the
    //  cutscene.
    global.cutscene_timer = fade_in;
    // Sets the end stamp for the second part of the animation.
    // -    The second phase is the time it takes for the wizards message
    //          to be displayed which is the number of letters in 
    //          the wizards message * the number of frames to write a character.
    text_1 = global.cutscene_timer + message_rate * string_length(message_2);
    // Adds the second phase of animation to total running time of the
    //  cutscene.
    global.cutscene_timer = text_1;
    // Sets the end stamp for the third part of the animation.
    // -    A simple 2 seocnd (30*2 frames) to allow the player a chance to read
    //          the wizard's text.
    text_1_wait = global.cutscene_timer + 2 * 30;
    // Adds the third phase of animation to total running time of the
    //  cutscene.
    global.cutscene_timer = text_1_wait;
    fade_out = global.cutscene_timer + fade_rate;
    // Adds the final phase of animation to total running time of the
    //  cutscene.
    global.cutscene_timer = fade_out;
}
else
{
    // This is the case a warp lead to this map without a valid cutscene.
    // -    This shows an error message for testing.
    //      Default: 150 frames (5 seconds).
    global.cutscene_timer = 150;
}

// Stores the total run time so the timer can be converted to a count up as 
//  opposed to a count down. (Used in Draw)
total_run_time = global.cutscene_timer;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>SCR_KEY_COOLDOWN</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// The cutscene ends when the timer expires
//      TO_DO: Change the timer so it's for each peice of of the cutscene instead
//          of for the whi

if (global.cutscene_timer == 0) 
{
    // Go to next map.
    // -    SCR_MAP_DONE will sort out which map based on the ending cutscenes id.
    if !SCR_MAP_DONE(global.cutscene_id) {show_message("Next Map Broken");}
}
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Allows users to skip the cutscene by pressing escape.
// -    TO_DO: make this either a menu or require the user to 
//          hold the key for a moment instead.
//          Note: Currently it also pops up the in game menu.
//              merely setting the menukey to be conisdered 
//              pressed going into the next map isn't enough.

// Resets the cutscene's timer, just incase one cutscene would lead into another.
global.cutscene_timer = 0;

// Should stop the ingame menu from immediatly popping up.
// -    It dosen't always work. If it's a tap then the menu
//          won't pop up.
//      TO_DO: Figure out why and fix.
global.menu_button_still_pressed = true;

// Go to next map.
// -    SCR_MAP_DONE will sort out which map based on the ending cutscenes id.
if !SCR_MAP_DONE(global.cutscene_id) {show_message("Next Map Broken");}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// The cutscene controller

// Changes the countdown timer to count up. 
// -    Total-time elsapsed.
adjusted_timer = total_run_time - global.cutscene_timer;

// Detects which cutscene is being played. 
if (global.cutscene_id == CUTSCENE_1_ID)
{
    // Checks which phase of the cutscene should be playing.
    if ( adjusted_timer &lt;  fade_in)
    {
        // During fade in.
        
        // Draws wizard at the locaation and size defined in the create event of this object.
        //  Its alpha channel is controlled by (seconds elasped)/(frames of fade)
        draw_sprite_ext(SPR_BARREL, 1, wizard_x, wizard_y, wizard_scale_x, wizard_scale_y, 0,c_white, (1+adjusted_timer)/fade_rate);
    }
    else if ( adjusted_timer &lt;  text_1)
    {
        // During the Phase where text is being written to the screen.
        
        // Draw Wizard. (Who is talking)
        draw_sprite_ext(SPR_BARREL, 1, wizard_x, wizard_y, wizard_scale_x, wizard_scale_y, 0,c_white, 1 );
        // Call function to draw the text box.
        SCR_CUTSCENE_TEXT_BOX();
        // Set font colour to black.
        draw_set_colour(c_black); 
        // Draw the name of the person who is speaking. 
        // -    The x &amp; y positons are chosen as the x &amp; y of the inner edge of the text box.
        //      The font is scaled up by *2.
        draw_text_transformed(0 + text_box_distance_from_edge + text_box_border, 576 + text_box_border, message_1, 2, 2, 0); 
        
        // Copies a portion of what the message is adding one character at a rate of 1/(message_rate).
        // -    TO_DO: This is currently inflexible. As the rate is set it is impossible to
        //          fast forward or close the mssage early. 
        message_temp = string_copy(message_2, 1, string_length(message_2) - (text_1 - adjusted_timer)/message_rate ) 
        // Plays a sound synced to adding a new letter by checing if the elasped time
        //  with the message mod message_rate is equal to 0.
        // -    This insures the noise will only play once per character.
        if (text_1 - adjusted_timer)%message_rate == 0 audio_play_sound(SND_CLACK_Reitanna_freesound_org, 1, false);
        // Prints the part of the message that is allowed to be displayed. See above.
        draw_text_transformed(0 + text_box_distance_from_edge + text_box_border, 576 + text_box_border + message_line_buffer, message_temp, 2, 2, 0);  
    }
    else if ( adjusted_timer &lt;  text_1_wait)
    {
        // A phase where nothing on the screen changes. The player has two seconds to read
        //  the text before it dissapers. 
        // -    TO_DO: Make this close on user prompting rather than automatically.
        
        // Draw wizard.
        draw_sprite_ext(SPR_BARREL, 1, wizard_x, wizard_y, wizard_scale_x, wizard_scale_y, 0,c_white, 1 );
        // Draw text box.
        SCR_CUTSCENE_TEXT_BOX();
        // Set text colour black.
        draw_set_colour(c_black); 
        // Draw header. (Wizard's name)
        draw_text_transformed(0 + text_box_distance_from_edge + text_box_border, 576 + text_box_border, message_1, 2, 2, 0); 
        // Draw wizard's complete message.
        draw_text_transformed(0 + text_box_distance_from_edge + text_box_border, 576 + text_box_border + message_line_buffer, message_2, 2, 2, 0);  
    }
    else if ( adjusted_timer &lt;  fade_out)
    {
        // Fade out phase.
        
        // Fade the wizard the oppisite as fade in.
        // -    Alpha = ((fade_rate) - (time elapsed)) / (fade_rate)
        draw_sprite_ext(SPR_BARREL, 1, wizard_x, wizard_y, wizard_scale_x, wizard_scale_x, 0,c_white, (fade_out - adjusted_timer)/fade_rate );
    }
    
}
else
{
    draw_background(BG_CUTSCENE_BROKEN, 0, 0);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
